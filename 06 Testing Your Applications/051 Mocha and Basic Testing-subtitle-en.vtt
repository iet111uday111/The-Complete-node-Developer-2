WEBVTT

00:00.600 --> 00:05.910
In this video you're going to create your very first test cases so you can test that your code is working

00:06.030 --> 00:10.980
as expected by adding automatic testing to our project will be able to verify that a function does what

00:10.980 --> 00:15.720
it says it'll do if we make a function that's supposed to add two numbers together we can automatically

00:15.750 --> 00:17.090
verify it's doing that.

00:17.160 --> 00:21.150
And if we have a function that's supposed to fetch a user from the database we can make sure it's doing

00:21.150 --> 00:22.470
that as well.

00:22.470 --> 00:27.210
Now to get started in this video we're going to look at the very basics of setting up a testing suite

00:27.390 --> 00:29.850
inside of a node J.S. project.

00:29.970 --> 00:35.250
We'll be testing a real world function and will be a challenge for you to test something as well in

00:35.250 --> 00:36.220
order to get started.

00:36.240 --> 00:39.750
We are going to make a directory to store our code for this section.

00:39.750 --> 00:46.940
I'm going to make one on the desktop using m k d i r and I'll call this directory node hyphen tests.

00:47.100 --> 00:53.330
Then I'm going to see the inside of it node hyphen tests so I can go ahead and run and PM in it.

00:53.430 --> 00:58.470
We are going to be installing modules and this is going to require a package does Jason File.

00:58.590 --> 01:04.020
I'm going to run NPM in it using the default values for everything simply clicking enter throughout

01:04.050 --> 01:05.780
every single step.

01:05.780 --> 01:10.360
Now once that package that Jason file is generated we can go ahead and open up the directory inside.

01:10.370 --> 01:15.800
Adam it's on the desktop and it's called node hyphen tests from here.

01:15.800 --> 01:18.650
We're ready to actually define a function that we want to test.

01:18.740 --> 01:22.700
The goal in this video is to learn how to set up testing for node project.

01:22.700 --> 01:27.110
So the actual functions we'll be testing are going to be pretty trivial but it will help illustrate

01:27.320 --> 01:30.880
exactly how to set up our tests to get started.

01:30.890 --> 01:36.020
Let's go ahead and make a fake module that will have some functions and we'll test those functions in

01:36.020 --> 01:37.080
the route of the project.

01:37.220 --> 01:41.630
I'm going to make a brand new directory and I'm going to call this directory tildes.

01:41.870 --> 01:47.300
We can assume this will store some utility functions like adding a number to another number or stripping

01:47.300 --> 01:51.060
out white spaces from a string anything kind of hodgepodge.

01:51.060 --> 01:53.600
That doesn't really belong in any specific location.

01:54.630 --> 02:00.630
I'm going to make a new file in the utility folder called utility dot J.S. and this is a similar pattern

02:00.630 --> 02:04.890
to what we did when we created the weather and location directory in our weather app.

02:04.920 --> 02:08.300
You're probably wondering why we have a folder and a file with the same name.

02:08.340 --> 02:10.560
I promise that will be clear in just a second.

02:10.650 --> 02:16.140
When we start testing now before we can write our first test case to make sure something works we need

02:16.140 --> 02:16.980
something to test.

02:17.100 --> 02:21.870
And I'm going to make a very basic function that takes two numbers and adds them together will create

02:21.870 --> 02:24.830
an outer function by setting module.

02:24.870 --> 02:28.640
Exports don't add equal to an arrow function.

02:29.700 --> 02:35.880
Now that arrow function is going to take two arguments a and b and inside of the function where it is

02:35.880 --> 02:38.820
going to return the value a plus b.

02:38.970 --> 02:40.940
Nothing too complex here.

02:41.250 --> 02:45.870
In essence we just have one expression inside of our arrow function and we want to return it.

02:45.900 --> 02:51.270
We can actually use the arrow function expression syntax which lets us at our expression right here

02:51.420 --> 02:54.770
A plus B and it's going to be implicitly returned.

02:54.780 --> 02:59.580
There's no need to explicitly add a return keyword on it to the function.

02:59.580 --> 03:04.800
And now that we have you tells Yes ready to go let's explore testing.

03:04.950 --> 03:09.260
We're going to be using a framework called Moka in order to set up our test suite.

03:09.290 --> 03:14.450
And this is going to let us configure our individual test cases and also run all of our test files.

03:14.460 --> 03:18.030
This is going to be really important for creating and running tests.

03:18.030 --> 03:19.730
The goal here is to make testing simple.

03:19.800 --> 03:22.320
And we're going to use Moka to do just that.

03:22.420 --> 03:25.490
Now that we have a file and a function we actually want to test.

03:25.590 --> 03:29.030
Let's go ahead and explore how to create and run a test suite.

03:29.310 --> 03:35.130
We're going to be doing this using these super popular testing framework Moka Moka which you can find

03:35.130 --> 03:43.870
in your browser at Moka J.S. dot org is a fantastic framework for creating and running test suites.

03:43.870 --> 03:49.090
It's super popular and they're page right here has all the information you'd ever want to know about

03:49.090 --> 03:53.410
setting it up configuring it and all the cool bells and whistles it has included.

03:53.650 --> 03:57.430
If you scroll down just a little bit you'll be able to see a table of contents.

03:57.490 --> 03:58.950
Here you can explore everything.

03:58.960 --> 04:04.510
Moka has to offer will be covering most of it in this section but for anything we don't cover I do want

04:04.510 --> 04:05.350
to make you aware.

04:05.380 --> 04:07.900
You can always learn about it here.

04:08.110 --> 04:12.850
Now that we've explored the Moka documentation page let's go ahead and install it and start using it

04:13.570 --> 04:14.680
over in the terminal.

04:14.710 --> 04:19.900
I'm going to install Moka First up I am going to clear the terminal output and then we can go ahead

04:19.990 --> 04:23.010
and install it using NPM install.

04:23.500 --> 04:27.000
When you use NPM install you can also use the shortcut NPM.

04:27.030 --> 04:29.660
I this has the exact same effect.

04:29.770 --> 04:30.920
I'm going to use NPM.

04:30.940 --> 04:36.990
I with Moka specifying the version at three point zero point zero.

04:37.120 --> 04:41.020
This is the most recent version of the library as of this filming.

04:41.020 --> 04:47.170
Now we do want to save this into the package that Jason File previously we have used the same flag but

04:47.170 --> 04:52.180
we're going to talk about a new flag right here called Save hyphen dev save.

04:52.190 --> 04:55.950
Dev is going to save this package for development purposes only.

04:56.020 --> 04:58.010
And that's exactly what Moka is going to be for.

04:58.180 --> 05:01.820
We don't actually need Moka to run our app on a service like Heroku.

05:01.870 --> 05:05.610
We just need Moka locally on our machine to test our code.

05:05.680 --> 05:09.860
When you use the save death flag it installs the module much the same way.

05:10.030 --> 05:13.930
But if you explore package drop Jason you'll see things are a little different.

05:14.620 --> 05:20.230
Over inside of our package that Jason file instead of a dependencies attribute we have a dev dependencies

05:20.230 --> 05:26.140
attribute in there we have Moka with the version number as the value dev dependencies are fantastic

05:26.170 --> 05:29.930
because they're not going to be installed on Heroku but they will be installed locally.

05:30.070 --> 05:33.090
This will keep the Heroku boot times really really quick.

05:33.100 --> 05:36.390
It won't need to install modules that it's not going to actually need.

05:36.610 --> 05:42.480
We'll be installing Boll's dev dependencies and dependencies in most of our projects from here on out.

05:42.490 --> 05:48.800
Now that we have Moka installed we can go ahead and create a test file over in the utils folder.

05:48.800 --> 05:54.510
We're going to make a new file this file is going to store our test cases.

05:54.510 --> 05:56.890
We're not going to store test cases in utilities.

05:56.980 --> 05:59.310
Yes this is going to be our application code.

05:59.310 --> 06:03.490
Instead we're going to make a file called utils dot test.

06:03.650 --> 06:05.700
Us when we use this test.

06:05.760 --> 06:10.560
Jeff's extension we're basically telling our app that this is going to store our test cases and when

06:10.560 --> 06:16.470
Moka goes through our app for tests to run it should run any file with this extension.

06:16.470 --> 06:17.850
Now we have a test file.

06:17.850 --> 06:24.840
The only thing left to do is create a test case a test case is a function that runs some code and if

06:24.840 --> 06:30.420
things go well great the test is considered to have passed and if things do not go well the test is

06:30.420 --> 06:32.270
considered to have failed.

06:32.400 --> 06:35.260
We can create a new test case using it.

06:35.420 --> 06:38.060
It is a function provided by moka.

06:38.190 --> 06:42.750
We're going to be running our project to test files through Moka so there's no reason to import it or

06:42.750 --> 06:43.860
do anything like that.

06:43.920 --> 06:47.350
We simply call it just like this now.

06:47.370 --> 06:51.060
It lets us to find a new test case and it takes two arguments.

06:51.060 --> 06:55.350
First up we're going to have a string description of what exactly the test is doing.

06:55.410 --> 07:03.650
If we're testing that the outer function works we might have something like it should add two numbers.

07:03.660 --> 07:06.170
Notice here that it plays into the sentence.

07:06.180 --> 07:07.580
It should read like this.

07:07.590 --> 07:12.090
It should add two numbers describes exactly what the test is going to verify.

07:12.120 --> 07:18.870
This is called behavior driven development or BDD and that's the principles that Moka was built on.

07:18.870 --> 07:20.900
Now we've set up the test string.

07:20.940 --> 07:27.520
The next thing to do is add a function of the second argument inside this function we're going to add

07:27.520 --> 07:31.000
the code that tests that the add function works as expected.

07:31.000 --> 07:36.100
This means that will probably call ad and check that the value that comes back is the appropriate value

07:36.130 --> 07:38.260
given the two numbers passed in.

07:38.260 --> 07:42.010
That means we do need to import the Eutelsat file up above.

07:42.130 --> 07:48.000
I'm going to create a constant called you tills setting equal to the return result from requiring you

07:48.000 --> 07:49.540
tills.

07:49.550 --> 07:50.800
I'm using forward slash.

07:50.800 --> 07:56.680
Since we are going to be requiring a local file it's in the same directory so I can simply type Patels

07:56.680 --> 07:59.270
right here without the J.S. extension.

07:59.320 --> 08:04.720
Now that we have the details a library loaded in inside of the callback we can call it let's make a

08:04.720 --> 08:06.890
variable to store the return results.

08:06.910 --> 08:14.050
I'm going to call this one results and we'll set it equal to you tills and don't add passing in two

08:14.050 --> 08:14.890
numbers.

08:14.890 --> 08:18.220
Let's go ahead and use something like 33 plus 11.

08:18.250 --> 08:21.020
We would expect it to get 40 for back.

08:21.160 --> 08:26.950
Now at this point we do have some code inside of our test suite so we can go ahead and run it and we're

08:26.950 --> 08:31.800
going to do that by configuring that test script we looked at in the last section inside a package.

08:31.840 --> 08:38.480
Jason currently the test script simply prints a message to the screen saying that no tests exist but

08:38.500 --> 08:42.370
we're going to do instead is call Moka right here.

08:42.370 --> 08:48.400
We're going to be calling Moka passing in as the one and only argument in the actual files we want to

08:48.400 --> 08:52.630
test and we can use the globbing pattern to specify multiple files.

08:52.720 --> 08:59.350
In this case we'll be using star star to look in every single directory and we're looking for a file

08:59.470 --> 09:02.610
called utils dot test dot J.

09:02.620 --> 09:03.550
Yes.

09:03.550 --> 09:07.310
Now this is a very specific pattern it's not going to be particularly useful.

09:07.450 --> 09:11.290
Instead we can swap out the file name with a star as well.

09:11.290 --> 09:18.160
Now we're looking for any file in the project that has a file name ending in dot test dot Yes and this

09:18.160 --> 09:21.520
is exactly what we want from here.

09:21.520 --> 09:26.500
We can run our test suite by saving package adjacent and moving over to the terminal.

09:26.590 --> 09:32.920
I'm going to use clear to clear the terminal output and then we can run our test script using NPM test

09:33.550 --> 09:34.520
when we run this.

09:34.540 --> 09:37.260
We're actually going to be executing that Moka command.

09:37.300 --> 09:38.020
It's going to go off.

09:38.020 --> 09:40.030
It's going to fetch all of our test files.

09:40.090 --> 09:42.930
It's going to run all of them and print the results right here.

09:42.940 --> 09:45.910
Here we can see we have a green checkmark next to our test.

09:45.940 --> 09:51.760
Should add two numbers then down below we have a little summary one passing test and it happened in

09:51.840 --> 09:53.750
eight milliseconds.

09:53.770 --> 09:58.090
Now in our case we don't actually assert anything about the number that comes back.

09:58.180 --> 10:00.100
It could be seven hundred and we wouldn't care.

10:00.100 --> 10:03.150
The test is always going to pass to make a test fail.

10:03.160 --> 10:11.110
What we have to do is throw an error that means right here we can throw a new error and we pass into

10:11.110 --> 10:14.830
the constructor function whatever message we want to use as the error.

10:14.920 --> 10:20.620
In this case I could say something like a value not correct.

10:21.510 --> 10:26.640
Now with this in place I can save the test file and rerun things over from the terminal by rerunning

10:26.700 --> 10:27.740
NPM test.

10:27.870 --> 10:33.930
And when I do that now we have 0 tests passing and we have one test failing Double-O we can see the

10:33.930 --> 10:39.990
one test is I should add two numbers and we get our error message value not correct when we throw a

10:39.990 --> 10:41.550
new error the test fails.

10:41.610 --> 10:45.410
And that's exactly what we want to do for ad right here.

10:45.510 --> 10:54.150
I'm going to go ahead and create an if statement if the response value is not equal to 44.

10:54.150 --> 10:59.040
That means we have a problem on our hands and we're going to throw an error inside of here.

10:59.130 --> 11:05.400
I can throw a new air and I'm going to use a template string as our message string because I do want

11:05.400 --> 11:16.230
to use the value that comes back in and the error message I'm going to say expected 44 comma but got.

11:16.540 --> 11:20.860
Then I'll inject the actual value whatever happens to come back.

11:20.890 --> 11:26.340
Now in our case everything is going to line up great but what if the add method wasn't working correctly.

11:26.470 --> 11:31.750
Overing you tale's we can simulate this by simply tacking on another edition adding on something like

11:31.750 --> 11:32.950
22.

11:33.010 --> 11:36.930
I'm going to save the file or rerun the test suite.

11:37.070 --> 11:43.250
And now we get an error message expected 44 but got 66 this error message is fantastic.

11:43.250 --> 11:47.360
It lets us know that something is going wrong with the test and that even tells us exactly what we got

11:47.360 --> 11:49.270
back and what we expected.

11:49.490 --> 11:54.390
This is going to let us go into the add function look for errors and hopefully fix them.

11:54.470 --> 11:59.510
Now if we were to rerun the test suite with the appropriate add function all of our tests should be

11:59.510 --> 12:06.080
passing and right here we get just that creating test cases does it need to be something super complex.

12:06.170 --> 12:10.740
Here you can see we have a simple test case that tests a simple function.

12:10.790 --> 12:14.600
Now for a challenge we're going to create a new function and you're going to be responsible for adding

12:14.600 --> 12:17.930
a test case that asserts it works as expected.

12:17.930 --> 12:22.020
Let's go ahead and create a function that squares a number and returns the result.

12:22.160 --> 12:30.530
We're going to define that over in you tildes module ADOT exports dot square we'll set that equal to

12:30.530 --> 12:39.290
an arrow function that takes in one number X and we're going to return x times x x times X just like

12:39.320 --> 12:40.130
this.

12:40.140 --> 12:45.710
Now we have this brand new function Square and it's going to be your job to create a new test case that

12:45.710 --> 12:48.820
makes sure square works as expected.

12:48.890 --> 12:50.630
Overing you tills adcom test.

12:50.780 --> 12:57.410
Yes down below you're going to call it again with something like it should square a number then you're

12:57.410 --> 13:02.390
going to call the utility ADOT square method passing in a number of your choice and you're going to

13:02.390 --> 13:07.550
store the result in a variable and then you'll use an IF statement to check if it's not what you expect

13:07.550 --> 13:08.190
it to be.

13:08.210 --> 13:12.640
If it's not you can throw a new error printing a little message like we do here.

13:12.950 --> 13:17.000
Now when you create that task you should be able to run the test suite and you'll see that everything

13:17.000 --> 13:21.440
works as expected because currently the utility function is defined correctly.

13:21.440 --> 13:23.100
We just do X times x.

13:23.150 --> 13:29.180
I want you to mess up square doing something like X times x plus one or any other computation that's

13:29.180 --> 13:31.640
going to cause an incorrect result to be returned.

13:31.820 --> 13:37.610
Then you can rerun your test suite and your new test should fail if it fails then you are done the challenge.

13:37.610 --> 13:43.680
You can fix the square function make your test pass again and then you can go ahead and click play.

13:43.730 --> 13:49.460
So take a moment create that new test case mess up the square function fix the square function make

13:49.460 --> 13:54.390
sure everything works as expected and when you're done click play.

13:54.440 --> 13:55.370
How'd you do.

13:55.370 --> 13:58.740
I hope you were able to create that test case and see it pass.

13:58.750 --> 14:01.490
Then you were able to mess things up watching it fail.

14:01.790 --> 14:08.870
I'm going to get started in details test file by adding a new call to it to make the new test case inside

14:08.870 --> 14:09.430
of here.

14:09.440 --> 14:13.970
We're going to add our two arguments the string which will fill out in just a second and the callback

14:13.970 --> 14:17.530
function inside the string.

14:17.620 --> 14:18.960
I'm going to create our message.

14:19.000 --> 14:21.190
It should square a number

14:24.980 --> 14:29.210
and inside of the callback function we can actually go ahead and call Square.

14:29.210 --> 14:34.100
Now I do want to create a variable to store the results so I can check that the result is what I expect

14:34.100 --> 14:35.030
it to be.

14:35.150 --> 14:40.700
Then I can call you tildes square passing in a number I'm going to go with three in this case which

14:40.700 --> 14:44.140
means I should expect nine to come back down below.

14:44.210 --> 14:45.610
I can have an if statement.

14:45.800 --> 14:53.870
If the result does not equal nine then we're going to go ahead and throw a message because things went

14:53.870 --> 14:54.440
wrong.

14:54.710 --> 15:01.580
We can throw an error using throw new error passing in whatever message we like we can use a regular

15:01.580 --> 15:07.130
string but I always prefer using a template string so we can inject values easily.

15:07.190 --> 15:14.760
I'll say something like expected 9 comma but got followed by the value.

15:14.760 --> 15:18.870
That's not correct in this case that's stored in the response variable.

15:18.870 --> 15:23.850
Now I can go ahead and save this test case and run the test suite from the terminal using the up arrow

15:23.850 --> 15:24.810
key and the Enter key.

15:24.810 --> 15:26.520
I can rerun the last command.

15:26.580 --> 15:27.610
And what do we get.

15:27.660 --> 15:33.330
We get two tests passing should add two numbers and should square a number of both have check marks

15:33.360 --> 15:39.780
next to them and we ran both tests in just 14 milliseconds which is fantastic.

15:39.780 --> 15:44.970
Now the next thing I want you to do is mess up the square function to make sure your test fails when

15:44.970 --> 15:46.570
the number is not correct.

15:46.620 --> 15:51.770
I'm going to go ahead and add one on to the result which is going to cause the test to fail.

15:51.870 --> 15:56.220
Then I can rerun things over from the terminal and we should see the error message and right here we

15:56.220 --> 15:58.980
do expect a 9 but got 10.

15:58.980 --> 16:00.740
This is fantastic.

16:00.780 --> 16:06.570
We now have a test suite capable of testing both the add function and the square function.

16:06.570 --> 16:09.450
I'm going to remove that plus one and we are done.

16:09.480 --> 16:14.130
We now have a very very basic test suite that we could execute with moka.

16:14.280 --> 16:20.760
Currently we have two tests and to create those tests we use the method provided by Moka in the next

16:20.760 --> 16:25.890
several videos we'll be exploring more methods that Moka gives us and we'll also be looking at better

16:25.890 --> 16:29.870
ways to do our assertions instead of manually creating them.

16:29.940 --> 16:33.520
We'll be using an assertion library to help with the heavy lifting.

16:33.630 --> 16:35.060
That is all coming up next.

16:35.160 --> 16:36.210
So stay tuned.

16:36.220 --> 16:37.770
I will see you soon.
